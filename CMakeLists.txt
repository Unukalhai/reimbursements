cmake_minimum_required(VERSION 2.8.7)
project(reimbursements)

#[[if(NOT ${CMAKE_VERSION} LESS 3.2)
    set(CMAKE_CXX_STANDARD 11)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
else()
    message(STATUS "Checking compiler flags for C++11 support.")
    # Set C++11 support flags for various compilers
    include(CheckCXXCompilerFlag)
    check_cxx_compiler_flag("-std=c++11" COMPILER_SUPPORTS_CXX11)
    check_cxx_compiler_flag("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
    if(COMPILER_SUPPORTS_CXX11)
        message(STATUS "C++11 is supported.")
        if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -stdlib=libc++")
        else()
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
        endif()
    elseif(COMPILER_SUPPORTS_CXX0X)
        message(STATUS "C++0x is supported.")
        if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -stdlib=libc++")
        else()
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
        endif()
    else()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
    endif()
endif() ]]

#set(CREST_ID ${CMAKE_CURRENT_SOURCE_DIR}/../crest/include)
include_directories(include)
# include_directories(${CREST_ID})

set(REIMBURSEMENTS_ID ${CMAKE_CURRENT_SOURCE_DIR}/include/reimbursements/)
set(REIMBURSEMENTS_SD ${CMAKE_CURRENT_SOURCE_DIR}/src/)
set(REIMBURSEMENTS_SOUCE_LIB
        ${REIMBURSEMENTS_SD}/main.cpp
        ${REIMBURSEMENTS_SD}/price.cpp
        ${REIMBURSEMENTS_SD}/db.cpp

        ${REIMBURSEMENTS_ID}/price.h
        ${REIMBURSEMENTS_ID}/db.h
        # ${CREST_ID}/crest/crest.h
        )

add_executable(Reimbursements ${REIMBURSEMENTS_SOUCE_LIB})
target_link_libraries(Reimbursements libmysqlcppconn.so)
target_link_libraries(Reimbursements crest)